import os
import time
import requests
from google.cloud import firestore
from tenacity import retry, stop_after_attempt, wait_fixed

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Configuration) ---
print("üöÄ Starting Script Writer Worker (v2.0 with Retry Logic)...")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Cloud (‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå key ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Path ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
GCP_KEY_FILE_PATH = "E:\\streamlit-story-app\\youtubeubload.json"
GCP_PROJECT_ID = "youtubeubload"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á Replit API ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
REPLIT_API_URL = "https://83ad9944-9259-4aa1-a670-43bf9d023e8e-00-2bt3s9wflkig.worf.replit.dev/generate"

try:
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = GCP_KEY_FILE_PATH
    if not os.path.exists(GCP_KEY_FILE_PATH):
        raise FileNotFoundError(f"Key file not found at: {GCP_KEY_FILE_PATH}")
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firestore
    db = firestore.Client(project=GCP_PROJECT_ID)
    print("‚úÖ Successfully connected to Firestore.")
except Exception as e:
    print(f"‚ùå Worker failed to initialize: {e}")
    exit() # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à


# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Worker ---

# Decorator @retry ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
# ‡∏ñ‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏î Exception (‡πÄ‡∏ä‡πà‡∏ô HTTP 503), tenacity ‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà
@retry(
    stop=stop_after_attempt(3), # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    wait=wait_fixed(15), # ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≠ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Replit ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏∑‡πà‡∏ô)
    reraise=True # ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô Error ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
)
def call_replit_api(topic, style):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Replit API ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ retry ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏à‡∏∏‡∏î)
    """
    print("    - Attempting to call Replit API...")
    payload = {"topic": topic, "style": style}
    response = requests.post(REPLIT_API_URL, json=payload, timeout=90) # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 90 ‡∏ß‡∏¥
    response.raise_for_status() # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ Error (‡πÄ‡∏ä‡πà‡∏ô 4xx, 5xx), tenacity ‡∏à‡∏∞‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    print("    - Call to Replit API successful.")
    return response.json()


def process_script_request(doc_id, doc_data):
    """
    ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå, ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Replit API, ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore
    """
    print(f"  - Processing project: {doc_id}")
    topic = doc_data.get('topic')
    style = doc_data.get('style')

    if not topic:
        print(f"  - ‚ùå Error: Topic is missing in project {doc_id}. Marking as failed.")
        db.collection('projects').document(doc_id).update({'status': 'script_failed', 'error_message': 'Topic is missing'})
        return

    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ @retry ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà
        story_data = call_replit_api(topic, style)
        
        scenes = story_data.get("scenes")
        if not scenes:
            raise ValueError("Replit API response did not contain a 'scenes' key.")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Document ‡πÉ‡∏ô Firestore
        print(f"  - Received {len(scenes)} scenes. Updating Firestore for project {doc_id}...")
        db.collection('projects').document(doc_id).update({
            'scenes': scenes,
            'status': 'assets_pending', # <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            'script_completed_at': firestore.SERVER_TIMESTAMP,
            'error_message': firestore.DELETE_FIELD # ‡∏•‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        })
        print(f"  - ‚úÖ Project {doc_id} script generation completed successfully.")

    except Exception as e:
        error_message = f"Failed after multiple retries: {e}"
        print(f"  - ‚ùå An error occurred for project {doc_id}: {error_message}")
        db.collection('projects').document(doc_id).update({
            'status': 'script_failed',
            'error_message': error_message
        })


# --- 3. Main Loop: ‡∏ß‡∏á‡∏à‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ---
def main_loop():
    print("\nüëÇ Worker is listening for new projects with status 'script_pending'...")
    while True:
        try:
            # Query ‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏ó‡∏≥‡∏ö‡∏ó
            projects_ref = db.collection('projects')
            # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: UserWarning ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Library ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            query = projects_ref.where('status', '==', 'script_pending').limit(1) 
            docs = query.stream()

            found_job = False
            for doc in docs:
                found_job = True
                doc_id = doc.id
                print(f"\n‚ú® Found a new job! Project ID: {doc_id}")
                
                # ‡∏•‡πá‡∏≠‡∏Ñ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                projects_ref.document(doc_id).update({'status': 'script_processing'})
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                process_script_request(doc_id, doc.to_dict())
            
            if not found_job:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏á‡∏≤‡∏ô, ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                # ‡∏û‡∏¥‡∏°‡∏û‡πå . ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
                print(".", end="", flush=True) 
                time.sleep(10) # ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

        except Exception as e:
            print(f"\n\nüö® An critical error occurred in the main loop: {e}\n\n")
            time.sleep(30) # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î Error ‡πÉ‡∏´‡∏ç‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà

if __name__ == "__main__":
    main_loop()