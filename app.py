import streamlit as st
import os
from datetime import datetime
from google.cloud import firestore

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞ GCP (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Hybrid) ---
st.set_page_config(page_title="AI Story Factory", page_icon="üè≠", layout="wide")

@st.cache_resource
def connect_to_firestore():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firestore ‡πÇ‡∏î‡∏¢‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Secrets ‡∏Å‡πà‡∏≠‡∏ô, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå Local
    """
    try:
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ Streamlit Secrets (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô Deploy)
        if "gcp_service_account" in st.secrets:
            creds_dict = st.secrets["gcp_service_account"]
            project_id = creds_dict.get("project_id")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå credentials ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏à‡∏≤‡∏Å secret
            with open("gcp_creds.json", "w") as f:
                f.write(str(creds_dict).replace("'", '"')) # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç format ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gcp_creds.json"
            
            db = firestore.Client(project=project_id)
            st.success("Connected to Firestore using Streamlit Secrets.")
            return db, None

        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Secrets, ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå Local (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
        else:
            local_key_path = "youtubeubload.json" # <--- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if not os.path.exists(local_key_path):
                return None, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Key ‡∏ó‡∏µ‡πà: {local_key_path}"
            
            os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = local_key_path
            
            # ‡∏≠‡πà‡∏≤‡∏ô project_id ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            import json
            with open(local_key_path, 'r') as f:
                creds = json.load(f)
                project_id = creds.get('project_id')

            db = firestore.Client(project=project_id)
            st.info("Connected to Firestore using local key file.")
            return db, None
            
    except Exception as e:
        return None, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}"

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
db, error_message = connect_to_firestore()

# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ---
def create_story_project(topic: str, style: str):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Document ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Firestore collection 'projects'"""
    if not db:
        st.error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore")
        return None
    try:
        projects_ref = db.collection('projects')
        project_data = {
            'topic': topic,
            'style': style,
            'status': 'script_pending',
            'created_at': firestore.SERVER_TIMESTAMP,
        }
        update_time, doc_ref = projects_ref.add(project_data)
        return doc_ref.id
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå: {e}")
        return None

def fetch_projects():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore"""
    if not db:
        return []
    try:
        projects_ref = db.collection('projects')
        docs = projects_ref.order_by("created_at", direction=firestore.Query.DESCENDING).stream()
        
        project_list = []
        for doc in docs:
            project_data = doc.to_dict()
            project_data['id'] = doc.id
            project_list.append(project_data)
        return project_list
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÑ‡∏î‡πâ: {e}")
        return []

# --- 3. ‡∏™‡πà‡∏ß‡∏ô UI ‡∏Ç‡∏≠‡∏á Streamlit ---

st.title("üè≠ AI Story Factory - Command Center")

if not db:
    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ: {error_message}")
else:
    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3.1: Form ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà ---
    with st.expander("üìù **Create a New Story Order**", expanded=True):
        with st.form("story_order_form", clear_on_submit=True):
            st.subheader("Order Details")
            topic = st.text_input("Topic:", "a dragon who is afraid of heights")
            style = st.text_input("Style:", "a comedy adventure")
            
            submitted = st.form_submit_button("üöÄ SUBMIT ORDER TO FACTORY")
            
            if submitted:
                if topic:
                    with st.spinner("Submitting order to the production line..."):
                        project_id = create_story_project(topic, style)
                        if project_id:
                            st.success(f"Order submitted successfully! Project ID: {project_id}")
                            st.balloons()
                else:
                    st.warning("Please enter a topic.")

    st.divider()

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3.2: Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ---
    st.header("üìä Production Line Monitoring")

    if st.button("üîÑ Refresh Project List"):
        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ Streamlit ‡∏à‡∏∞ rerun ‡πÄ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
        pass

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    projects = fetch_projects()
    
    if not projects:
        st.info("No projects in the production line yet. Create a new order above!")
    else:
        for project in projects:
            with st.container(border=True):
                # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á topic, style, status ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
                
                final_url = project.get("final_video_url")
                if final_url:
                    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ---
                    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ st.video ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô Signed URL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                    # st.video(final_url) 
                    
                    st.success("üéâ Your video is ready!")
                    st.info("Click the button below to open and watch your video in a new tab. The link will expire in 1 hour.")
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                    st.link_button("üé¨ **Watch Your Video**", final_url)
                    # ---------------------------
                
                # (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                error_msg = project.get("error_message")
                if error_msg:
                    with st.expander("View Error Details"):
                        st.error(error_msg)